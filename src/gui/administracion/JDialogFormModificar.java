/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui.administracion;

import gui.componentes.JComboBoxIdiomas;
import gui.componentes.JTextFieldUpdate;
import gui.componentes.Tooltip;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.io.IOException;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JDialog;
import javax.swing.JOptionPane;
import lanword.controladores.administracion.PalabrasCtrl;
import lanword.interfaces.bd.BDResolver;
import lanword.modelo.Idioma;
import lanword.modelo.Palabra;

/**
 *
 * @author vikour
 */
public class JDialogFormModificar extends javax.swing.JDialog implements WindowListener, KeyListener {
    private PalabrasCtrl palabrasCtrl;
    private Tooltip tip;
    
    public JDialogFormModificar(java.awt.Frame parent, boolean modal) throws Exception {
        super(parent, modal);
        palabrasCtrl = palabrasCtrl.getInstance();
        
        // Si no hay ninguna palabra seleccionada, no se puede seguir con la clase.
        if (palabrasCtrl.getSeleccionada() ==  null)
            throw new Exception("Tiene que haber una palabra seleccionada.");
        
        setUndecorated(true);
        initComponents();
        
        // Se rellenan los datos de la palabra.
        ((JTextFieldUpdate) jTextFieldNombre).setInitalValue(palabrasCtrl.getSeleccionada().getNombre());
        jComboBoxIdioma.setSelectedItem(palabrasCtrl.getSeleccionada().getIdioma());
        
        addWindowListener(this);
        setLocationByPlatform(true);
        setLocationRelativeTo(parent);
        
        // Se prepara el tip, este tip SIEMPRE se mostrará enlzado al jTextFieldNombre
        tip = new Tooltip("", Tooltip.ERROR, jTextFieldNombre, 2000);
        
        // Se agrega el listener al JTextFieldNombre, para hacer trigger a modificar mediante ENTER.
        jTextFieldNombre.addKeyListener(this);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jTextFieldNombre = new gui.componentes.JTextFieldUpdate();
        jLabel2 = new javax.swing.JLabel();
        jComboBoxIdioma = new JComboBoxIdiomas(false);
        jButtonModificar = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setText("Nombre : ");

        jLabel2.setText("Idioma :");

        jButtonModificar.setText("Aceptar");
        jButtonModificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonModificarActionPerformed(evt);
            }
        });

        jButton2.setText("Cancelar");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(34, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jTextFieldNombre)
                    .addComponent(jLabel2)
                    .addComponent(jComboBoxIdioma, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonModificar, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(34, 34, 34))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextFieldNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jComboBoxIdioma, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 34, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonModificar, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(24, 24, 24))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        dispatchEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButtonModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonModificarActionPerformed
        boolean nombreModificado = ((JTextFieldUpdate) jTextFieldNombre).isChangedValue();
        String nombre = jTextFieldNombre.getText();
        Idioma idioma = (Idioma) jComboBoxIdioma.getSelectedItem();
        Palabra palabra = palabrasCtrl.getSeleccionada();
        boolean cancelOperation = false;

        try {
            
            if (!idioma.equals(palabra.getIdioma())) {
                int confirmar = JOptionPane.showConfirmDialog(this, "Si se actualiza el idioma, se borrarán todas las traducciones.\n¿Seguro que quieres cambiar el idioma?",
                        "Cambiar idioma", JOptionPane.YES_NO_OPTION);
                
                if (confirmar == JOptionPane.YES_OPTION) {
                    Idioma tmp = palabra.getIdioma();
                    palabra.setIdioma(idioma);
                    BDResolver.getInstance().palabras.actualizarIdioma(palabra, tmp);
                }
                else
                    cancelOperation = true;
                
            }
            
            if (!cancelOperation && nombreModificado) {
                String tmp = palabra.getNombre();
                palabra.setNombre(nombre);
                BDResolver.getInstance().palabras.actualizarNombre(palabra, tmp);

            }
            
            dispatchEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));
        }
        catch (IllegalArgumentException ex) {
            tip.setMessage(ex.getMessage());
            tip.setVisible(true);
        }
        catch (SQLException ex) {
            tip.setMessage("Ya existe una palabra con ese nombre");
            tip.setVisible(true);
        } 
        catch (ClassNotFoundException ex) { } 
        catch (IOException ex) { }

    }//GEN-LAST:event_jButtonModificarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JDialogFormModificar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JDialogFormModificar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JDialogFormModificar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JDialogFormModificar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    JDialogFormModificar dialog = new JDialogFormModificar(new javax.swing.JFrame(), true);
                    dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                        @Override
                        public void windowClosing(java.awt.event.WindowEvent e) {
                            System.exit(0);
                        }
                    });
                    dialog.setVisible(true);
                } catch (Exception ex) {
                    Logger.getLogger(JDialogFormModificar.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButtonModificar;
    private javax.swing.JComboBox jComboBoxIdioma;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JTextField jTextFieldNombre;
    // End of variables declaration//GEN-END:variables

    @Override
    public void windowOpened(WindowEvent e) {

    }

    @Override
    public void windowClosing(WindowEvent e) {
        ((JDialog) e.getSource()).dispose();
    }

    @Override
    public void windowClosed(WindowEvent e) {

    }

    @Override
    public void windowIconified(WindowEvent e) {

    }

    @Override
    public void windowDeiconified(WindowEvent e) {

    }

    @Override
    public void windowActivated(WindowEvent e) {

    }

    @Override
    public void windowDeactivated(WindowEvent e) {

    }

    @Override
    public void keyTyped(KeyEvent e) {}

    @Override
    public void keyPressed(KeyEvent e) {}

    @Override
    public void keyReleased(KeyEvent e) {
        
        if (KeyEvent.VK_ENTER == e.getKeyCode())
            jButtonModificarActionPerformed(null);
        
    }
}
