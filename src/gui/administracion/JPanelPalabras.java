/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui.administracion;

import gui.componentes.JComboBoxIdiomas;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.io.IOException;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Observable;
import java.util.Observer;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.ListSelectionModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;
import lanword.controladores.administracion.FiltroPalabra;
import lanword.controladores.administracion.PalabrasCtrl;
import lanword.interfaces.bd.BDManagment;
import lanword.interfaces.bd.BDResolver;
import lanword.modelo.Idioma;
import lanword.modelo.Palabra;
import gui.componentes.JComboBoxGrupos;
import java.awt.Frame;
import javax.swing.JDialog;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import lanword.modelo.Grupo;

/**
 *
 * @author vikour
 */
public class JPanelPalabras extends javax.swing.JPanel {
    
    private BDManagment bd;
    private PalabrasCtrl palabrasCtrl;

    /**
     * Creates new form JPanelPalabras
     */
    public JPanelPalabras() {
        try {
            bd = BDResolver.getInstance();
            palabrasCtrl = PalabrasCtrl.getInstance();
            initComponents();
            jTextFieldFiltroNombre.addKeyListener(new OnTypeFilterName());
            jComboBoxFiltroIdiomas.addActionListener(new OnLanguageFilterSelected());
            jComboBoxFiltroGrupo.addActionListener(new OnGroupFilterSelected());
        } catch (SQLException ex) {
            Logger.getLogger(JPanelPalabras.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(JPanelPalabras.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(JPanelPalabras.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        JButtonNueva = new javax.swing.JButton();
        JButtonModificar = new javax.swing.JButton();
        JButtonBorrar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new JTablePalabras();
        jLabel1 = new javax.swing.JLabel();
        jTextFieldFiltroNombre = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jComboBoxFiltroGrupo = new JComboBoxGrupos();
        jLabel4 = new javax.swing.JLabel();
        jComboBoxFiltroIdiomas = new JComboBoxIdiomas(true);
        JButtonTraducir = new javax.swing.JButton();

        JButtonNueva.setText("Nueva");
        JButtonNueva.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JButtonNuevaActionPerformed(evt);
            }
        });

        JButtonModificar.setText("Modificar");
        JButtonModificar.setEnabled(false);
        JButtonModificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JButtonModificarActionPerformed(evt);
            }
        });

        JButtonBorrar.setText("Borrar");
        JButtonBorrar.setEnabled(false);
        JButtonBorrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JButtonBorrarActionPerformed(evt);
            }
        });

        jScrollPane1.setViewportView(jTable1);

        jLabel1.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        jLabel1.setText("Buscar por ...");

        jTextFieldFiltroNombre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldFiltroNombreActionPerformed(evt);
            }
        });

        jLabel2.setText("Nombre : ");

        jLabel3.setText("Grupo :");

        jLabel4.setText("Idioma :");

        JButtonTraducir.setText("Traducir");
        JButtonTraducir.setEnabled(false);
        JButtonTraducir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JButtonTraducirActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(JButtonNueva, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(JButtonModificar, javax.swing.GroupLayout.DEFAULT_SIZE, 120, Short.MAX_VALUE)
                    .addComponent(JButtonBorrar, javax.swing.GroupLayout.DEFAULT_SIZE, 120, Short.MAX_VALUE)
                    .addComponent(jLabel1)
                    .addComponent(jTextFieldFiltroNombre)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3)
                    .addComponent(jComboBoxFiltroGrupo, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel4)
                    .addComponent(jComboBoxFiltroIdiomas, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(JButtonTraducir, javax.swing.GroupLayout.DEFAULT_SIZE, 120, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(JButtonNueva, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(JButtonModificar, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(JButtonBorrar, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(JButtonTraducir, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextFieldFiltroNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBoxFiltroGrupo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBoxFiltroIdiomas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGap(13, 13, 13))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jTextFieldFiltroNombreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldFiltroNombreActionPerformed

    }//GEN-LAST:event_jTextFieldFiltroNombreActionPerformed

    private void JButtonNuevaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JButtonNuevaActionPerformed
        new JDialogFormNuevaPalabra((Frame) SwingUtilities.getWindowAncestor(this).getParent(), true).setVisible(true);
        jTable1.updateUI();
    }//GEN-LAST:event_JButtonNuevaActionPerformed

    private void JButtonModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JButtonModificarActionPerformed
        try {
            new JDialogFormModificar( (Frame) SwingUtilities.getWindowAncestor(this).getParent(), true).setVisible(true);
            jTable1.updateUI();
        } catch (Exception ex) {
            Logger.getLogger(JPanelPalabras.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_JButtonModificarActionPerformed

    private void JButtonBorrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JButtonBorrarActionPerformed
        int aceptarOperacion;
        
        aceptarOperacion = JOptionPane.showConfirmDialog(this, "¿Seguro que quieres borrar la palabra?", "Borrar palabra", JOptionPane.YES_NO_OPTION);
        
        if (aceptarOperacion == JOptionPane.YES_OPTION) {
            try {
                bd.palabras.borrar(palabrasCtrl.getSeleccionada());
                jTable1.updateUI();
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.WARNING_MESSAGE);
            }
        }
    }//GEN-LAST:event_JButtonBorrarActionPerformed

    private void JButtonTraducirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JButtonTraducirActionPerformed
        try {
            new JDialogFormTraducciones((Frame) SwingUtilities.getWindowAncestor(this).getParent(), true).setVisible(true);
            jTable1.updateUI();
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Tienes que crear al menos 2 idiomas.", "Error", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_JButtonTraducirActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton JButtonBorrar;
    private javax.swing.JButton JButtonModificar;
    private javax.swing.JButton JButtonNueva;
    private javax.swing.JButton JButtonTraducir;
    private javax.swing.JComboBox jComboBoxFiltroGrupo;
    private javax.swing.JComboBox jComboBoxFiltroIdiomas;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextFieldFiltroNombre;
    // End of variables declaration//GEN-END:variables


    public class OnTypeFilterName implements KeyListener {

        @Override
        public void keyTyped(KeyEvent e) {
            // do nothing
        }


        @Override
        public void keyPressed(KeyEvent e) {
            // do nothing
        }

        @Override
        public void keyReleased(KeyEvent e) {
            String text = ((JTextField) e.getSource()).getText();
            
            palabrasCtrl.getFiltro().setNombre(text);
        }
        
    }
    
    public class OnLanguageFilterSelected implements ActionListener {
        private final Idioma nulo = new Idioma("Ninguno");

        @Override
        public void actionPerformed(ActionEvent e) {
            
            if (jComboBoxFiltroIdiomas.getSelectedItem().equals(nulo))
                palabrasCtrl.getFiltro().setIdioma(null);
            else
                palabrasCtrl.getFiltro().setIdioma((Idioma) jComboBoxFiltroIdiomas.getSelectedItem());
            
        }
        
    }
    
    public class OnGroupFilterSelected implements ActionListener {
        private final Grupo NULO = new Grupo("Ninguno", null);
        
        @Override
        public void actionPerformed(ActionEvent e) {
            Grupo selected = (Grupo) jComboBoxFiltroGrupo.getSelectedItem();
            
            if (selected.equals(NULO))
                palabrasCtrl.getFiltro().setGrupo(null);
            else
                palabrasCtrl.getFiltro().setGrupo(selected);
            
        }
        
    }
    
    public class JTablePalabras extends JTable implements Observer, ListSelectionListener {
        private JTableModelPalabras model;

        public JTablePalabras() {
            model = new JTableModelPalabras();
            // Cada vez que se modifique el filtro, es vigilado por la tabla.
            palabrasCtrl.getFiltro().addObserver(this);

            getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
            try {
                model.updatePalabras();
            } catch (SQLException ex) {
                Logger.getLogger(JPanelPalabras.class.getName()).log(Level.SEVERE, null, ex);
            }
            setModel(model);
        }

        @Override
        public void valueChanged(ListSelectionEvent e) {
            int index;
            
            if (e.getValueIsAdjusting()) {
                index = this.getSelectionModel().getLeadSelectionIndex();
                Palabra seleccionada = model.getPalabras().get(index);
                
                palabrasCtrl.setSeleccionada(seleccionada);
                JButtonModificar.setEnabled(true);
                JButtonBorrar.setEnabled(true);
                JButtonTraducir.setEnabled(true);
                super.valueChanged(e);
            }
        }
        
        @Override
        public void updateUI() {
            try {
                
                if (model != null) {
                    model.updatePalabras();
                    // Cuando se actualiza, se deselecciona la palabra seleccionada.
                    clearSelection();
                    palabrasCtrl.setSeleccionada(null);
                    JButtonModificar.setEnabled(false);
                    JButtonBorrar.setEnabled(false);
                    JButtonTraducir.setEnabled(false);
                }
            } catch (SQLException ex) {
                Logger.getLogger(JPanelPalabras.class.getName()).log(Level.SEVERE, null, ex);
            }
            super.updateUI(); 
        }

        @Override
        public void update(Observable o, Object arg) {

            if (o instanceof FiltroPalabra) 
                updateUI();
            
        }
        
    }
    
    public class JTableModelPalabras extends DefaultTableModel {
        private ArrayList<Palabra> palabras;
        private final String header[] = new String [] {"Palabra", "Idioma", "Traducciones"};
        private FiltroPalabra filtro;
        
        public JTableModelPalabras() {
            filtro = palabrasCtrl.getFiltro();
            palabras = new ArrayList<>();
        }

        public void updatePalabras() throws SQLException {
            palabras = bd.palabras.buscar(filtro.getNombre(), filtro.getGrupo(), filtro.getIdioma());
        }

        @Override
        public boolean isCellEditable(int row, int column) {
            return false;
        }
        
        public ArrayList<Palabra> getPalabras() {
            return palabras;
        }

        @Override
        public int getColumnCount() {
            return header.length;
        }

        @Override
        public String getColumnName(int column) {
            return header[column];
        }

        @Override
        public int getRowCount() {
            
            if (palabras != null)
                return palabras.size();
            else
                return 0;
        }

        @Override
        public Object getValueAt(int row, int column) {
            String out = "";
            
            switch (column) {
                
                case 0: // Nombre de la palabra.
                    return palabras.get(row).getNombre();
                    
                case 1: // Idioma de la palabra.
                    return palabras.get(row).getIdioma();
                    
                case 2:
                    ArrayList<Palabra> traducciones = palabras.get(row).getTraducciones();
                    
                    if (traducciones.isEmpty())
                        return "";
                    else if (traducciones.size() == 1)
                        return traducciones.get(0) + ".";
                    else if (traducciones.size() == 2) {
                        return traducciones.get(0) + " y " + traducciones.get(1) + ".";
                    }
                    else if (traducciones.size() > 3) {
                        
                        for (int i = 0 ; i < 3 ; i++)
                            
                            if (i == 0)
                                out += traducciones.get(i).getNombre();
                            else
                                out += ", " + traducciones.get(i).getNombre();
                        
                        return out + "...";
                    }
                    
                default:
                    return "NADA";
            }
            
        }
        
    }
    
}
